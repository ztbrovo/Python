# Python's design goals :
# 1. A simple and intuitive language and as powerful as the main competitor；
# 2. Open source so that anyone can contribute to it；
# 3. The code is as easy to understand as English；
# 4. Suitable for daily tasks of short-term development.
# design concepts : Elegant, clear and simple.
# Features : 
# 1. It is a fully object-oriented language；To solve a problem first consider who will do it.Functions, modules, numbers, strings,etc.
# 2. Have a powerful standard library；
# 3. A large number of third-party modules which involves CS, AI, ML, etc.


#####  01. First HelloPython Program #####
# The python source program is a text file in a special format; The file extension is usually .py
# step: create 01-HelloPython.py file and edit as follows and execute this file using command python 01-HelloPython.py　in terminal.
print("hello python")
print("hello world")
# The function of print is to output the content inside the "" to the screen.
# frequent bugs: Misspell → NameError; Write multiple print functions on one line →　SyntaxError →　attention: Each line of code is responsible for completing an action.
# Indentation error →　IndentationError →　Attention: Do not add spaces before each line of code.
# Python 2.x defaultly do not support Chinese which Python 3.x supports. command python3 01-HelloPython.py
# Ipython I- interaction
# Python's IDE -- Pycharm , Integrated Development Environment

# annotation   # or """
                  """
# How to use annotation? Comments are not as many as possible; For complex operations, comments should be written before the operation starts; 
                       Add comments at the end of the line for code that cannot be understood immediately; Don’t describe the code, but explain why it’s written like this.
# Arithmetic Operator: + - * /  // 9//2=4  % 9%2=1  ** 2**3=8  "-" * 10 '----------'
                    precedence **       * / //%      + -
# The program is used to process data. Variables are used to store data.


#####  Variables  #####
# Each variable must be assigned a value before use.(=)

print(x)
type(x)
string = input("x")
int(x)
float(x)
%s %d %f %%  print("Format string" % string1)  print("Format string" % (string1,string2))   %06d  %.2f

Identifiers(variable names or function names) and keywords(used identifiers by python).
letters, numbers and _ and can not be started with numbers and repeated with keywords. Identifiers need to be case sensitive.
Variable naming: first_name is better than FirstName or firstName.

(if)
if condition:
    to , 
else:
    to 

Comparison operator: ==  !=  >  <  >=  <=
and or not

elif

if condition1: 
    to 
elif condition2:
    to
elif condition3:
    to
else:
    to
condition1,2,3 are the same level
    
nested if

if condition1:
    to1
    if condition2:
        to2
    else:
        to
else:

if (()
        or ()
        or ()):
is better than
if () or () or ():


# Random number processing
import random
random.  Click the tab key to confirm all random function.
random.randint(a, b)
# attention :When importing the toolkit, the imported statement should be placed at the top of the file. 
             Because this makes it easy for the code below to use the tools in the toolkit whenever you need it.


# cycle
Three methods of program development: sequence (from top to bottom), branch (judgment according to conditions), loop (repeated execution of specific code)
# while loop
Let the executed code be executed repeatedly according to the specified number of times.

Initial conditions
while (Determine whether the counter reaches the target number of times):
    What to do when the conditions are met1
    What to do when the conditions are met2
    What to do when the conditions are met3
    
    Processing conditions (counter + 1)
# Endless loop: Forgetting to modify the judgment condition of the loop inside the loop, causing the loop to continue to execute, and the program cannot be terminated.

# Assignment operator
=      c = a + b
+=     c += a equivalent to c = c + a
-=     c -= a equivalent to c = c - a
*=     ....
/=     .... 
//=  quzhengchu    ....
%=   quyushu    ....

# Python's counting method: Unless special requirements are required, the count of cycles starts from 0.
# Cyclic calculation
 step1' define a variable above the while funtion to store the final calculation results.
 step2' Inside the loop, each loop uses the latest calculation result to update the previously defined variables.

# often used in the cycle: break and continue.
break: when satify some requirements, exit the loop and no longer execute subsequent repeated codes.
continue: when satify some requirements, stop execute subsequent repeated codes.

# while loop nesting
while (Determine whether the counter reaches the target number of times):
    What to do when the conditions are met1
    What to do when the conditions are met2
    What to do when the conditions are met3
    
    while (Determine whether the counter reaches the target number of times):
        What to do when the conditions are met1
        What to do when the conditions are met2
        What to do when the conditions are met3
    
        Processing conditions2 (counter + 1)
    Processing conditions1 (counter + 1)

print("*", end="") 
print("*")   dont't change the row

Escape character in string
\\
\'
\"
\n
\t    Align text in columns vertically without using a table.
\r
---------------------------------------------------------------------------2020.05.03


# Function basis
Function' Combine code blocks with independent functions into a small module and call it when needed
step' define and use.

# define a function
def name_of_function():
    """comment method of function"""
    code
    ....
# F8 step over and F7 step into in Pycharm

# return

# Nested function call

# module
Every python source code file ending with the extension py is a module.
The global variables and functions defined in the module are tools that the module can provide to the outside world for direct use.
use import        py→pyc to speed up


# High-grade variation type
 list, original composition, dictionary, character skewer, public method, variable amount
# List
 List: python used most frequently number type, in other languages usually screaming number set.
 Dedicated to storing a piece of information.
 Use [] to define the list, use , to isolate
 The index of the list starts at 0.
 len(list) the length of the list: n + 1
 list.count(data) The number of times the data appears in the list.
 # List common operations
 in ipython: name_list = []
             name_list. then click tab key.
 list.sort()
 list.sort(reverse_True)
 list.reverse()
 ...
 
 # if forgot the information of the function, choose that function and click Ctrl + Q.
 
 # difference of keyword, function, method
 # keyword do not need ()
import keyword
print(keyword.kwlist)
['False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']
# function needs to remember and needs () 
function()
# method needs ()
object.method()
 
# Loop traversal --for
# Get data from the list sequentially from beginning to end.
for name in function:
    print(name)
# situation
Although different data can be stored in the python list, in development, more application scenarios are
the list stores the same type of data, and through iterative traversal, the same operation is performed for each element in the loop.
 
 # tuple
 tuple is the same as list. the difference is the elements of the tuple cannot be modified.
 tuple is defined by ().
 tuple is often used to store different types of variables.
info_tuple = ()
# When the tuple contains only one element, you need to add , after the element.
info_tuple = (50, )
# info.index   info.count
# Loop traversal --tuple. Not much demand, unless you can confirm that the data types in the tuples are the same.
# for [variable] in tuple
for item in info
    print(item)
# situation
Function parameters and return values; Format string; Make the list unchangeable.

# Conversion between tuples and lists.
list(tuple)
tuple(list)


# dictionary
list---ordered
dictionary---unordered
{}
key---index
value---data
key : value
key must be unique.
The value can take any data type, but the key can only use strings, numbers and tuples.
# Common operations.
xiaoming = {}
xiaoming.    then pycharm will prompt usable functions.
# Loop traversal --dictionary. Not much demand, unless you can confirm that the data types in the dictionary are the same.
# for key in dictionary
for k in xiaoming:
    print("%s : %s" % (k, xiaoming[k]))
# situation
1. Use multiple key-value pairs to store relevant information describing an object.
2. Put multiple dictionaries in a list, then traverse, and do the same processing for each dictionary inside the loop.
 
 
 # string
 "" or '' or "''" or '""' 
 the index is from 0. str[] of for
 # Common operations.
 len(str)
 str.count(str)
 str[index]
 str.index(str)
 # functions
 hello_str = ""
 hello_str. tab key in ipython
 # Judgment type -9
isspace()	Returns True if all characters in the string are whitespaces　　　　\t\n\r　are whitespaces.
isalnum()	Returns True if all characters in the string are alphanumeric
isalpha()	Returns True if all characters in the string are in the alphabet
isdecimal()	Returns True if all characters in the string are decimals. often used.
isdigit()	Returns True if all characters in the string are digits. such as (1), \u00b2
isnumeric()	Returns True if all characters in the string are numeric. such as chinese numbers
isidentifier()	Returns True if the string is an identifier
islower()	Returns True if all characters in the string are lower case
isprintable()	Returns True if all characters in the string are printable
istitle()	Returns True if the string follows the rules of a title
isupper()	Returns True if all characters in the string are upper case
# Find and replace -7
startswith()	Returns true if the string starts with the specified value
endswith()	Returns true if the string ends with the specified value
find()	Searches the string for a specified value and returns the position of where it was found
rfind()	Searches the string for a specified value and returns the last position of where it was found
index()	Searches the string for a specified value and returns the position of where it was found
rindex()	Searches the string for a specified value and returns the last position of where it was found
replace()	Returns a string where a specified value is replaced with a specified value
# Case conversion -5
capitalize()	Converts the first character to upper case
title()	Converts the first character of each word to upper case
lower()	Converts a string into lower case
upper()	Converts a string into upper case
swapcase()	Swaps cases, lower case becomes upper case and vice versa
# Text alignment -3
ljust()	Returns a left justified version of the string
rjust()	Returns a right justified version of the string
center()	Returns a centered string
# Remove whitespace characters -3
lstrip()	Returns a left trim version of the string
rstrip()	Returns a right trim version of the string
strip()	Returns a trimmed version of the string
# Split and join -5
partition()	Returns a tuple where the string is parted into three parts
rpartition()	Returns a tuple where the string is parted into three parts
split()	Splits the string at the specified separator, and returns a list
splitlines()	Splits the string at line breaks and returns a list
join()	Joins the elements of an iterable to the end of the string

# Slice of string
The slicing method is suitable for strings, lists, and tuples
str[startindex: endindex: length]
 
 
# Public method
len(item)
del(item)
max(item)
min(item)
cmp(item1, item2)

# Slice of list and tuple
dictionary can not be sliced.
# Operator
*  +  in  not in  >  >=  ==  <  <= 
# complete for loop
for variable in item:
    ...
else:
    ...(did not exit through break. when loop ends, this code will be executed)


# Comprehensive application -- Business Card Management System
# Frame construction
file preparation: cards_main.py  ----  Main program function code
                  cards_tools.py  ----  All functions for business card 








